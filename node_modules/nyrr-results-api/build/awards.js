"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTeamAwardRunners = exports.teamAwardRunnersSchema = exports.getTeamAwards = exports.teamAwardsSchema = void 0;
const zod_1 = require("zod");
const postToNyrr_1 = __importDefault(require("./postToNyrr"));
const endpoint = 'awards';
exports.teamAwardsSchema = zod_1.z.object({
    "awardId": zod_1.z.number(),
    "teamGroupOrder": zod_1.z.number(),
    "teamOrder": zod_1.z.number(),
    "teamCode": zod_1.z.string(),
    "teamName": zod_1.z.string(),
    "teamGender": zod_1.z.string(),
    "minimumAge": zod_1.z.number(),
    "summaryPlace": zod_1.z.number(),
    "summaryTime": zod_1.z.number(),
    "runnersCount": zod_1.z.number(),
});
const getTeamAwards = (eventCode, teamCode, gender = null, minimumAge = null) => __awaiter(void 0, void 0, void 0, function* () {
    const postData = {
        eventCode,
        teamCode,
    };
    if (gender !== null) {
        postData.gender = gender;
    }
    if (minimumAge !== null) {
        postData.minimumAge = minimumAge.toString();
    }
    const response = yield (0, postToNyrr_1.default)(`${endpoint}/teamAwards`, postData);
    const data = response.data.items;
    zod_1.z.array(exports.teamAwardsSchema).parse(data);
    return data;
});
exports.getTeamAwards = getTeamAwards;
exports.teamAwardRunnersSchema = zod_1.z.object({
    "runnerId": zod_1.z.number(),
    "firstName": zod_1.z.string(),
    "lastName": zod_1.z.string(),
    "bib": zod_1.z.string(),
    "gender": zod_1.z.string(),
    "age": zod_1.z.number(),
    "city": zod_1.z.string(),
    "stateProvince": zod_1.z.string(),
    "country": zod_1.z.string(),
    "iaaf": zod_1.z.string(),
    "finishTime": zod_1.z.number(),
    "finishPlace": zod_1.z.number(),
});
const getTeamAwardRunners = (eventCode, teamCode, teamGender = null, teamMinimumAge = null) => __awaiter(void 0, void 0, void 0, function* () {
    const postData = {
        eventCode,
        teamCode,
    };
    if (teamGender !== null) {
        postData.teamGender = teamGender;
    }
    if (teamMinimumAge !== null) {
        postData.teamMinimumAge = teamMinimumAge.toString();
    }
    const response = yield (0, postToNyrr_1.default)(`${endpoint}/teamAwardRunners`, postData);
    const data = response.data.items;
    zod_1.z.array(exports.teamAwardRunnersSchema).parse(data);
    return data;
});
exports.getTeamAwardRunners = getTeamAwardRunners;
