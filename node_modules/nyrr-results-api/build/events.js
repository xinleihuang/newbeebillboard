"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.search = exports.eventSchema = void 0;
const zod_1 = require("zod");
const postToNyrr_1 = __importDefault(require("./postToNyrr"));
const endpoint = 'events';
exports.eventSchema = zod_1.z.object({
    "eventName": zod_1.z.string(),
    "eventCode": zod_1.z.string(),
    "startDateTime": zod_1.z.string(),
    "distanceName": zod_1.z.string(),
    "distanceUnitCode": zod_1.z.string(),
    "distanceDimension": zod_1.z.number(),
    "venue": zod_1.z.string().nullable(),
    "runnerAwardsCount": zod_1.z.number(),
    "teamAwardsCount": zod_1.z.number(),
    "teamsCount": zod_1.z.number(),
    "customStatisticsCount": zod_1.z.number(),
    "logoImageId": zod_1.z.number().nullable(),
    "logoImageExtension": zod_1.z.string().nullable(),
    "isVirtual": zod_1.z.boolean(),
    "virtualStartDate": zod_1.z.string().nullable(),
    "virtualEndDate": zod_1.z.string().nullable(),
    "isAllowedDeleting": zod_1.z.boolean(),
    "hasAgeGradedResults": zod_1.z.boolean(),
});
const search = (year = null, searchString = "", distance = null) => __awaiter(void 0, void 0, void 0, function* () {
    const defaultPageSize = 2000;
    const postData = {
        year,
        searchString,
        distance,
        pageIndex: 1,
        pageSize: defaultPageSize,
    };
    const response = yield (0, postToNyrr_1.default)(`${endpoint}/search`, postData);
    const data = response.data.items;
    zod_1.z.array(exports.eventSchema).parse(data);
    if (response.data.totalItems > defaultPageSize) {
        postData.pageIndex += defaultPageSize;
        postData.pageSize = response.data.totalItems - defaultPageSize;
        const additionalEventsResponse = yield (0, postToNyrr_1.default)(`${endpoint}/search`, postData);
        const additionalEvents = additionalEventsResponse.data.items;
        zod_1.z.array(exports.eventSchema).parse(additionalEvents);
        data.push(...additionalEvents);
    }
    return data;
});
exports.search = search;
