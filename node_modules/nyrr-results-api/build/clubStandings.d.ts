import { z } from "zod";
export declare type getYears = Promise<number[]>;
export declare const getYears: () => getYears;
export declare const teamEventDetailsSchema: z.ZodObject<{
    distanceName: z.ZodString;
    distanceUnitCode: z.ZodString;
    eventCode: z.ZodString;
    eventName: z.ZodString;
    isClubPointsPublished: z.ZodBoolean;
    isPointsReallyExists: z.ZodBoolean;
    isTeamAwardExists: z.ZodBoolean;
    logoImageExtension: z.ZodNullable<z.ZodString>;
    logoImageId: z.ZodNullable<z.ZodNumber>;
    points: z.ZodNullable<z.ZodNumber>;
    startDateTime: z.ZodString;
}, "strip", z.ZodTypeAny, {
    distanceName: string;
    distanceUnitCode: string;
    eventCode: string;
    eventName: string;
    isClubPointsPublished: boolean;
    isPointsReallyExists: boolean;
    isTeamAwardExists: boolean;
    logoImageExtension: string | null;
    logoImageId: number | null;
    points: number | null;
    startDateTime: string;
}, {
    distanceName: string;
    distanceUnitCode: string;
    eventCode: string;
    eventName: string;
    isClubPointsPublished: boolean;
    isPointsReallyExists: boolean;
    isTeamAwardExists: boolean;
    logoImageExtension: string | null;
    logoImageId: number | null;
    points: number | null;
    startDateTime: string;
}>;
export declare type TeamEventDetails = z.infer<typeof teamEventDetailsSchema>;
export declare const teamResultsSchema: z.ZodObject<{
    teamCode: z.ZodString;
    teamName: z.ZodString;
    teamPlace: z.ZodNumber;
    totalPoints: z.ZodNumber;
    eventDetails: z.ZodOptional<z.ZodArray<z.ZodObject<{
        distanceName: z.ZodString;
        distanceUnitCode: z.ZodString;
        eventCode: z.ZodString;
        eventName: z.ZodString;
        isClubPointsPublished: z.ZodBoolean;
        isPointsReallyExists: z.ZodBoolean;
        isTeamAwardExists: z.ZodBoolean;
        logoImageExtension: z.ZodNullable<z.ZodString>;
        logoImageId: z.ZodNullable<z.ZodNumber>;
        points: z.ZodNullable<z.ZodNumber>;
        startDateTime: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        distanceName: string;
        distanceUnitCode: string;
        eventCode: string;
        eventName: string;
        isClubPointsPublished: boolean;
        isPointsReallyExists: boolean;
        isTeamAwardExists: boolean;
        logoImageExtension: string | null;
        logoImageId: number | null;
        points: number | null;
        startDateTime: string;
    }, {
        distanceName: string;
        distanceUnitCode: string;
        eventCode: string;
        eventName: string;
        isClubPointsPublished: boolean;
        isPointsReallyExists: boolean;
        isTeamAwardExists: boolean;
        logoImageExtension: string | null;
        logoImageId: number | null;
        points: number | null;
        startDateTime: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    eventDetails?: {
        distanceName: string;
        distanceUnitCode: string;
        eventCode: string;
        eventName: string;
        isClubPointsPublished: boolean;
        isPointsReallyExists: boolean;
        isTeamAwardExists: boolean;
        logoImageExtension: string | null;
        logoImageId: number | null;
        points: number | null;
        startDateTime: string;
    }[] | undefined;
    teamCode: string;
    teamName: string;
    teamPlace: number;
    totalPoints: number;
}, {
    eventDetails?: {
        distanceName: string;
        distanceUnitCode: string;
        eventCode: string;
        eventName: string;
        isClubPointsPublished: boolean;
        isPointsReallyExists: boolean;
        isTeamAwardExists: boolean;
        logoImageExtension: string | null;
        logoImageId: number | null;
        points: number | null;
        startDateTime: string;
    }[] | undefined;
    teamCode: string;
    teamName: string;
    teamPlace: number;
    totalPoints: number;
}>;
export declare type TeamResults = z.infer<typeof teamResultsSchema>;
export declare type getDivisionResults = Promise<TeamResults[]>;
export declare const getDivisionResults: (divisionCode: string, year: number) => getDivisionResults;
export declare const divisionResultsSchema: z.ZodObject<{
    divisionCode: z.ZodString;
    divisionGender: z.ZodEnum<["M", "W", "X"]>;
    divisionName: z.ZodString;
    divisionOrder: z.ZodNumber;
    teamResults: z.ZodArray<z.ZodObject<{
        teamCode: z.ZodString;
        teamName: z.ZodString;
        teamPlace: z.ZodNumber;
        totalPoints: z.ZodNumber;
        eventDetails: z.ZodOptional<z.ZodArray<z.ZodObject<{
            distanceName: z.ZodString;
            distanceUnitCode: z.ZodString;
            eventCode: z.ZodString;
            eventName: z.ZodString;
            isClubPointsPublished: z.ZodBoolean;
            isPointsReallyExists: z.ZodBoolean;
            isTeamAwardExists: z.ZodBoolean;
            logoImageExtension: z.ZodNullable<z.ZodString>;
            logoImageId: z.ZodNullable<z.ZodNumber>;
            points: z.ZodNullable<z.ZodNumber>;
            startDateTime: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            distanceName: string;
            distanceUnitCode: string;
            eventCode: string;
            eventName: string;
            isClubPointsPublished: boolean;
            isPointsReallyExists: boolean;
            isTeamAwardExists: boolean;
            logoImageExtension: string | null;
            logoImageId: number | null;
            points: number | null;
            startDateTime: string;
        }, {
            distanceName: string;
            distanceUnitCode: string;
            eventCode: string;
            eventName: string;
            isClubPointsPublished: boolean;
            isPointsReallyExists: boolean;
            isTeamAwardExists: boolean;
            logoImageExtension: string | null;
            logoImageId: number | null;
            points: number | null;
            startDateTime: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        eventDetails?: {
            distanceName: string;
            distanceUnitCode: string;
            eventCode: string;
            eventName: string;
            isClubPointsPublished: boolean;
            isPointsReallyExists: boolean;
            isTeamAwardExists: boolean;
            logoImageExtension: string | null;
            logoImageId: number | null;
            points: number | null;
            startDateTime: string;
        }[] | undefined;
        teamCode: string;
        teamName: string;
        teamPlace: number;
        totalPoints: number;
    }, {
        eventDetails?: {
            distanceName: string;
            distanceUnitCode: string;
            eventCode: string;
            eventName: string;
            isClubPointsPublished: boolean;
            isPointsReallyExists: boolean;
            isTeamAwardExists: boolean;
            logoImageExtension: string | null;
            logoImageId: number | null;
            points: number | null;
            startDateTime: string;
        }[] | undefined;
        teamCode: string;
        teamName: string;
        teamPlace: number;
        totalPoints: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    divisionCode: string;
    divisionGender: "M" | "W" | "X";
    divisionName: string;
    divisionOrder: number;
    teamResults: {
        eventDetails?: {
            distanceName: string;
            distanceUnitCode: string;
            eventCode: string;
            eventName: string;
            isClubPointsPublished: boolean;
            isPointsReallyExists: boolean;
            isTeamAwardExists: boolean;
            logoImageExtension: string | null;
            logoImageId: number | null;
            points: number | null;
            startDateTime: string;
        }[] | undefined;
        teamCode: string;
        teamName: string;
        teamPlace: number;
        totalPoints: number;
    }[];
}, {
    divisionCode: string;
    divisionGender: "M" | "W" | "X";
    divisionName: string;
    divisionOrder: number;
    teamResults: {
        eventDetails?: {
            distanceName: string;
            distanceUnitCode: string;
            eventCode: string;
            eventName: string;
            isClubPointsPublished: boolean;
            isPointsReallyExists: boolean;
            isTeamAwardExists: boolean;
            logoImageExtension: string | null;
            logoImageId: number | null;
            points: number | null;
            startDateTime: string;
        }[] | undefined;
        teamCode: string;
        teamName: string;
        teamPlace: number;
        totalPoints: number;
    }[];
}>;
export declare type DivisionResults = z.infer<typeof divisionResultsSchema>;
export declare type getDivisionsResults = Promise<DivisionResults[]>;
export declare const getDivisionsResults: (year: number) => getDivisionsResults;
export declare const teamSchema: z.ZodObject<{
    teamCode: z.ZodString;
    teamName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    teamCode: string;
    teamName: string;
}, {
    teamCode: string;
    teamName: string;
}>;
export declare type Team = z.infer<typeof teamSchema>;
export declare type getTeams = Promise<Team[]>;
export declare const getTeams: (year: number) => getTeams;
