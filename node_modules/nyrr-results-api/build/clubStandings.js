"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTeams = exports.teamSchema = exports.getDivisionsResults = exports.divisionResultsSchema = exports.getDivisionResults = exports.teamResultsSchema = exports.teamEventDetailsSchema = exports.getYears = void 0;
const zod_1 = require("zod");
const postToNyrr_1 = __importDefault(require("./postToNyrr"));
const endpoint = 'ClubStandings';
const getYears = () => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield (0, postToNyrr_1.default)(`${endpoint}/getYears`, {});
    const data = response.data.years;
    zod_1.z.array(zod_1.z.number()).parse(data);
    return data;
});
exports.getYears = getYears;
exports.teamEventDetailsSchema = zod_1.z.object({
    distanceName: zod_1.z.string(),
    distanceUnitCode: zod_1.z.string(),
    eventCode: zod_1.z.string(),
    eventName: zod_1.z.string(),
    isClubPointsPublished: zod_1.z.boolean(),
    isPointsReallyExists: zod_1.z.boolean(),
    isTeamAwardExists: zod_1.z.boolean(),
    logoImageExtension: zod_1.z.string().nullable(),
    logoImageId: zod_1.z.number().nullable(),
    points: zod_1.z.number().nullable(),
    startDateTime: zod_1.z.string(),
});
exports.teamResultsSchema = zod_1.z.object({
    teamCode: zod_1.z.string(),
    teamName: zod_1.z.string(),
    teamPlace: zod_1.z.number(),
    totalPoints: zod_1.z.number(),
    eventDetails: zod_1.z.array(exports.teamEventDetailsSchema).optional(),
});
const getDivisionResults = (divisionCode, year) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield (0, postToNyrr_1.default)(`${endpoint}/getDivisionResults`, {
        year,
        divisionCode,
    });
    const data = response.data.items;
    zod_1.z.array(exports.teamResultsSchema).parse(data);
    return data;
});
exports.getDivisionResults = getDivisionResults;
exports.divisionResultsSchema = zod_1.z.object({
    divisionCode: zod_1.z.string(),
    divisionGender: zod_1.z.enum(["M", "W", "X"]),
    divisionName: zod_1.z.string(),
    divisionOrder: zod_1.z.number(),
    teamResults: zod_1.z.array(exports.teamResultsSchema),
});
const getDivisionsResults = (year) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield (0, postToNyrr_1.default)(`${endpoint}/getDivisionsResults`, {
        year,
    });
    const data = response.data.items;
    zod_1.z.array(exports.divisionResultsSchema).parse(data);
    return data;
});
exports.getDivisionsResults = getDivisionsResults;
exports.teamSchema = zod_1.z.object({
    teamCode: zod_1.z.string(),
    teamName: zod_1.z.string(),
});
const getTeams = (year) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield (0, postToNyrr_1.default)(`${endpoint}/getTeams`, { year });
    const data = response.data.items;
    zod_1.z.array(exports.teamSchema).parse(data);
    return data;
});
exports.getTeams = getTeams;
